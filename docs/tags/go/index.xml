<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on Research Team</title>
    <link>https://sdt-research-team.github.io/tags/go/</link>
    <description>Recent content in go on Research Team</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 14 Jan 2021 09:57:01 +0700</lastBuildDate><atom:link href="https://sdt-research-team.github.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go Concurrency</title>
      <link>https://sdt-research-team.github.io/posts/go-concurrency/</link>
      <pubDate>Thu, 14 Jan 2021 09:57:01 +0700</pubDate>
      
      <guid>https://sdt-research-team.github.io/posts/go-concurrency/</guid>
      <description>Table of content General
Goroutine
Channel
Wait group
Refferences
General  If there&amp;rsquo;s one thing most people know about Go, is that it is designed for concurrency (1).
&amp;ndash; Andrew Gerrand &amp;ndash;
 Concurrent program Process and thread Concurrency vs parallel Goroutine The number of CPUs available simultaneously to executing goroutines is controlled by the GOMAXPROCS shell environment variable, whose default value is the number of CPU cores available (2)</description>
    </item>
    
    <item>
      <title>Control Structures</title>
      <link>https://sdt-research-team.github.io/posts/control-structures/</link>
      <pubDate>Sat, 19 Dec 2020 09:57:01 +0700</pubDate>
      
      <guid>https://sdt-research-team.github.io/posts/control-structures/</guid>
      <description>Control Structures Table of content General
If
Redeclaration And Reassignment
For
Switch
General If Basic usage
if x &amp;gt; 0 { return y } Note: Open &amp;amp; close parentheses &amp;ldquo;()&amp;rdquo; are not required
With initialization
if err := Foo(); err != nil { return err } Redeclaration and reassignment  Appears in Short variable declarations with at least one other variable that is created by the declaration. Example:  func Foo() (int, int) { return 1,2 } func main() { var a = 10 if true { a, b := Foo()// This is equal to &amp;#34;a, b := 1, 2&amp;#34; 	fmt.</description>
    </item>
    
    <item>
      <title>Naming</title>
      <link>https://sdt-research-team.github.io/posts/naming/</link>
      <pubDate>Sat, 19 Dec 2020 09:57:01 +0700</pubDate>
      
      <guid>https://sdt-research-team.github.io/posts/naming/</guid>
      <description>Naming Table of content Package
Variable
Interface
Semicolons
Tools
Package Packages được sử dụng để tổ chức code sao cho việc đọc và tái sử dụng code dễ dàng hơn. Packages giúp phân chia code thành nhiều phần, do đó việc update ứng dụng cũng thuận tiện hơn.
Tên một package nên được đặt một cách ngắn gọn và rõ nghĩa. Theo quy định chung của ngôn ngữ Golang thì nên dùng chuẩn Lower-case để đặt tên khi viết code trong Golang (bao gồm package, biến, hàm, &amp;hellip;) Lấy ví dụ những package trong thư viện golang thường là những danh từ đơn giản như: - time (hỗ trợ các thao tác liên quan đến xử lý thời gian) - list (dùng để dựng chuỗi liên kết đơn hoặc đôi)</description>
    </item>
    
    <item>
      <title>A Few Of Pointers</title>
      <link>https://sdt-research-team.github.io/posts/a-few-of-pointers/</link>
      <pubDate>Fri, 18 Dec 2020 10:57:01 +0700</pubDate>
      
      <guid>https://sdt-research-team.github.io/posts/a-few-of-pointers/</guid>
      <description>Pointers  A pointer is a variable that points to the address of another variable. In computer science, pointers are a form of indirection, and indirection can be a powerful tool.
 Pointers provide a way to share data across program boundaries. Having the ability to share and reference data with a pointer provides the benefit of efficiency. There is only one copy of the data and everyone can see it changing.</description>
    </item>
    
    <item>
      <title>Pointer Definition</title>
      <link>https://sdt-research-team.github.io/posts/pointer-definition/</link>
      <pubDate>Fri, 18 Dec 2020 09:57:01 +0700</pubDate>
      
      <guid>https://sdt-research-team.github.io/posts/pointer-definition/</guid>
      <description>Pointers Variable Variable (hay còn gọi là biến) là một ô nhớ đơn lẻ hoặc một vùng nhớ được hệ điều hành cấp phát cho chương trình Go nhằm để lưu trữ giá trị vào bên trong vùng nhớ đó. Để truy xuất đến giá trị mà biến đang nắm giữ, chương trình cần tìm đến vùng nhớ (địa chỉ) của biến để đọc giá trị bên trong vùng nhớ đó, cũng như bạn muốn lấy món đồ bên trong cái hộp, bạn cần biết cái hộp được đặt ở đâu.</description>
    </item>
    
  </channel>
</rss>
