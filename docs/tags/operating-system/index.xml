<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>operating system on Research Team</title>
    <link>https://sdt-research-team.github.io/tags/operating-system/</link>
    <description>Recent content in operating system on Research Team</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 14 Jan 2021 09:57:01 +0700</lastBuildDate><atom:link href="https://sdt-research-team.github.io/tags/operating-system/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go Concurrency</title>
      <link>https://sdt-research-team.github.io/posts/go-concurrency/</link>
      <pubDate>Thu, 14 Jan 2021 09:57:01 +0700</pubDate>
      
      <guid>https://sdt-research-team.github.io/posts/go-concurrency/</guid>
      <description>Table of content General
Refferences
General  If there&amp;rsquo;s one thing most people know about Go, is that it is designed for concurrency (1).
&amp;ndash; Andrew Gerrand &amp;ndash;
 Concurrent program Process and thread Concurrency vs parallel Goroutine The number of CPUs available simultaneously to executing goroutines is controlled by the GOMAXPROCS shell environment variable, whose default value is the number of CPU cores available (2)
Channel Wait group Refferences (1) https://golang.</description>
    </item>
    
  </channel>
</rss>
